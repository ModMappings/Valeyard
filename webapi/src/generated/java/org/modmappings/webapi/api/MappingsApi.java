/*
 * ModMappings API
 * This is the api for ModMappings. It is currently in development and in an alpha stage.
 *
 * The version of the OpenAPI document: 0.0.0-Dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.modmappings.webapi.api;

import org.modmappings.webapi.invoker.ApiCallback;
import org.modmappings.webapi.invoker.ApiClient;
import org.modmappings.webapi.invoker.ApiException;
import org.modmappings.webapi.invoker.ApiResponse;
import org.modmappings.webapi.invoker.Configuration;
import org.modmappings.webapi.invoker.Pair;
import org.modmappings.webapi.invoker.ProgressRequestBody;
import org.modmappings.webapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.modmappings.webapi.model.DetailedMapping;
import org.modmappings.webapi.model.MappableType;
import org.modmappings.webapi.model.Mapping;
import org.modmappings.webapi.model.PageDetailedMapping;
import org.modmappings.webapi.model.PageMapping;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MappingsApi {
    private ApiClient localVarApiClient;

    public MappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMapping
     * @param versionedMappable  (required)
     * @param mappingType  (required)
     * @param mapping  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creates the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given mapping is already in use. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingCall(UUID versionedMappable, UUID mappingType, Mapping mapping, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/mappings/{mappingType}/{versionedMappable}"
            .replaceAll("\\{" + "versionedMappable" + "\\}", localVarApiClient.escapeString(versionedMappable.toString()))
            .replaceAll("\\{" + "mappingType" + "\\}", localVarApiClient.escapeString(mappingType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ModMappings auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMappingValidateBeforeCall(UUID versionedMappable, UUID mappingType, Mapping mapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'versionedMappable' is set
        if (versionedMappable == null) {
            throw new ApiException("Missing the required parameter 'versionedMappable' when calling createMapping(Async)");
        }
        
        // verify the required parameter 'mappingType' is set
        if (mappingType == null) {
            throw new ApiException("Missing the required parameter 'mappingType' when calling createMapping(Async)");
        }
        

        okhttp3.Call localVarCall = createMappingCall(versionedMappable, mappingType, mapping, _callback);
        return localVarCall;

    }

    /**
     * Creates the mapping from the data in the request body.
     * This converts the data in the request body into a full mapping, and stores it in the database. The components of this mapping are populated from the latest available mappings in the given mapping type and game version. The name of the mapping can not already be in use. A user needs to be authorized to perform this request. A user needs to have the role &#39;MAPPINGS_CREATE&#39; to execute this action successfully.
     * @param versionedMappable  (required)
     * @param mappingType  (required)
     * @param mapping  (optional)
     * @return Mapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creates the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given mapping is already in use. </td><td>  -  </td></tr>
     </table>
     */
    public Mapping createMapping(UUID versionedMappable, UUID mappingType, Mapping mapping) throws ApiException {
        ApiResponse<Mapping> localVarResp = createMappingWithHttpInfo(versionedMappable, mappingType, mapping);
        return localVarResp.getData();
    }

    /**
     * Creates the mapping from the data in the request body.
     * This converts the data in the request body into a full mapping, and stores it in the database. The components of this mapping are populated from the latest available mappings in the given mapping type and game version. The name of the mapping can not already be in use. A user needs to be authorized to perform this request. A user needs to have the role &#39;MAPPINGS_CREATE&#39; to execute this action successfully.
     * @param versionedMappable  (required)
     * @param mappingType  (required)
     * @param mapping  (optional)
     * @return ApiResponse&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creates the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given mapping is already in use. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mapping> createMappingWithHttpInfo(UUID versionedMappable, UUID mappingType, Mapping mapping) throws ApiException {
        okhttp3.Call localVarCall = createMappingValidateBeforeCall(versionedMappable, mappingType, mapping, null);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates the mapping from the data in the request body. (asynchronously)
     * This converts the data in the request body into a full mapping, and stores it in the database. The components of this mapping are populated from the latest available mappings in the given mapping type and game version. The name of the mapping can not already be in use. A user needs to be authorized to perform this request. A user needs to have the role &#39;MAPPINGS_CREATE&#39; to execute this action successfully.
     * @param versionedMappable  (required)
     * @param mappingType  (required)
     * @param mapping  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creates the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given mapping is already in use. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingAsync(UUID versionedMappable, UUID mappingType, Mapping mapping, final ApiCallback<Mapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMappingValidateBeforeCall(versionedMappable, mappingType, mapping, _callback);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDetailedMappingById
     * @param id The id of the mapping to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedMappingByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappings/detailed/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailedMappingByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetailedMappingById(Async)");
        }
        

        okhttp3.Call localVarCall = getDetailedMappingByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Looks up a detailed mapping using a given id.
     * 
     * @param id The id of the mapping to look up. (required)
     * @return DetailedMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public DetailedMapping getDetailedMappingById(UUID id) throws ApiException {
        ApiResponse<DetailedMapping> localVarResp = getDetailedMappingByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Looks up a detailed mapping using a given id.
     * 
     * @param id The id of the mapping to look up. (required)
     * @return ApiResponse&lt;DetailedMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetailedMapping> getDetailedMappingByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getDetailedMappingByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DetailedMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Looks up a detailed mapping using a given id. (asynchronously)
     * 
     * @param id The id of the mapping to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedMappingByIdAsync(UUID id, final ApiCallback<DetailedMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailedMappingByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DetailedMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDetailedMappingsBySearchCriteria
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all mappings, and their metadata, in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedMappingsBySearchCriteriaCall(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappings/detailed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestOnly", latestOnly));
        }

        if (versionedMappableId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionedMappableId", versionedMappableId));
        }

        if (releaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseId", releaseId));
        }

        if (mappableType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappableType", mappableType));
        }

        if (inputRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inputRegex", inputRegex));
        }

        if (outputRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputRegex", outputRegex));
        }

        if (mappingTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingTypeId", mappingTypeId));
        }

        if (gameVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameVersionId", gameVersionId));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBy", createdBy));
        }

        if (parentClassId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentClassId", parentClassId));
        }

        if (parentMethodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentMethodId", parentMethodId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailedMappingsBySearchCriteriaValidateBeforeCall(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDetailedMappingsBySearchCriteriaCall(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort, _callback);
        return localVarCall;

    }

    /**
     * Gets all known mappings, and their metadata, and finds the ones that match the given parameters.
     * 
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PageDetailedMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all mappings, and their metadata, in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public PageDetailedMapping getDetailedMappingsBySearchCriteria(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<PageDetailedMapping> localVarResp = getDetailedMappingsBySearchCriteriaWithHttpInfo(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Gets all known mappings, and their metadata, and finds the ones that match the given parameters.
     * 
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;PageDetailedMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all mappings, and their metadata, in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageDetailedMapping> getDetailedMappingsBySearchCriteriaWithHttpInfo(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = getDetailedMappingsBySearchCriteriaValidateBeforeCall(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageDetailedMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all known mappings, and their metadata, and finds the ones that match the given parameters. (asynchronously)
     * 
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all mappings, and their metadata, in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedMappingsBySearchCriteriaAsync(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort, final ApiCallback<PageDetailedMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailedMappingsBySearchCriteriaValidateBeforeCall(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageDetailedMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMappingsById
     * @param id The id of the mapping to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingsByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappings/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingsByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMappingsById(Async)");
        }
        

        okhttp3.Call localVarCall = getMappingsByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Looks up a mapping using a given id.
     * 
     * @param id The id of the mapping to look up. (required)
     * @return Mapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public Mapping getMappingsById(UUID id) throws ApiException {
        ApiResponse<Mapping> localVarResp = getMappingsByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Looks up a mapping using a given id.
     * 
     * @param id The id of the mapping to look up. (required)
     * @return ApiResponse&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mapping> getMappingsByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getMappingsByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Looks up a mapping using a given id. (asynchronously)
     * 
     * @param id The id of the mapping to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the mapping with the given id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping with the given id could be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingsByIdAsync(UUID id, final ApiCallback<Mapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingsByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMappingsBySearchCriteria
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all mappings in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingsBySearchCriteriaCall(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latestOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestOnly", latestOnly));
        }

        if (versionedMappableId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionedMappableId", versionedMappableId));
        }

        if (releaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releaseId", releaseId));
        }

        if (mappableType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappableType", mappableType));
        }

        if (inputRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inputRegex", inputRegex));
        }

        if (outputRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputRegex", outputRegex));
        }

        if (mappingTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingTypeId", mappingTypeId));
        }

        if (gameVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameVersionId", gameVersionId));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBy", createdBy));
        }

        if (parentClassId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentClassId", parentClassId));
        }

        if (parentMethodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentMethodId", parentMethodId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingsBySearchCriteriaValidateBeforeCall(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMappingsBySearchCriteriaCall(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort, _callback);
        return localVarCall;

    }

    /**
     * Gets all known mappings and finds the ones that match the given parameters.
     * 
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PageMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all mappings in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public PageMapping getMappingsBySearchCriteria(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<PageMapping> localVarResp = getMappingsBySearchCriteriaWithHttpInfo(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Gets all known mappings and finds the ones that match the given parameters.
     * 
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;PageMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all mappings in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageMapping> getMappingsBySearchCriteriaWithHttpInfo(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = getMappingsBySearchCriteriaValidateBeforeCall(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all known mappings and finds the ones that match the given parameters. (asynchronously)
     * 
     * @param latestOnly Indicates if only latest mappings for a given versioned mappable should be taken into account. Defaults to true if not supplied. (optional, default to true)
     * @param versionedMappableId The id of the versioned mappable to filter on. (optional)
     * @param releaseId The id of the release to filter on. (optional)
     * @param mappableType The mappable type to filter on. (optional)
     * @param inputRegex The regular expression to match the input of the mapping against. (optional)
     * @param outputRegex The regular expression to match the output of the mapping against. (optional)
     * @param mappingTypeId The id of the mapping type to filter on. (optional)
     * @param gameVersionId The id of the game version to filter on. (optional)
     * @param createdBy The id of the user who created a mapping to filter on. (optional)
     * @param parentClassId The id of the class of which the targeted mappings versioned mappable resides in. (optional)
     * @param parentMethodId The id of the method of which the targeted mappings versioned mappable resides in. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all mappings in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no mapping exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingsBySearchCriteriaAsync(Boolean latestOnly, UUID versionedMappableId, UUID releaseId, MappableType mappableType, String inputRegex, String outputRegex, UUID mappingTypeId, UUID gameVersionId, UUID createdBy, UUID parentClassId, UUID parentMethodId, Integer page, Integer size, List<String> sort, final ApiCallback<PageMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingsBySearchCriteriaValidateBeforeCall(latestOnly, versionedMappableId, releaseId, mappableType, inputRegex, outputRegex, mappingTypeId, gameVersionId, createdBy, parentClassId, parentMethodId, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
