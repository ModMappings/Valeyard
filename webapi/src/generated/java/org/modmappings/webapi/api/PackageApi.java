/*
 * ModMappings API
 * This is the api for ModMappings. It is currently in development and in an alpha stage.
 *
 * The version of the OpenAPI document: 0.0.0-Dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.modmappings.webapi.api;

import org.modmappings.webapi.invoker.ApiCallback;
import org.modmappings.webapi.invoker.ApiClient;
import org.modmappings.webapi.invoker.ApiException;
import org.modmappings.webapi.invoker.ApiResponse;
import org.modmappings.webapi.invoker.Configuration;
import org.modmappings.webapi.invoker.Pair;
import org.modmappings.webapi.invoker.ProgressRequestBody;
import org.modmappings.webapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.modmappings.webapi.model.PageString;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackageApi {
    private ApiClient localVarApiClient;

    public PackageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPackagesBySearchCriteria
     * @param gameVersion The id of the game version to get the package for. (optional)
     * @param release The id of the release to get the package for. (optional)
     * @param mappingType The id of the mapping type to get the package for. (optional)
     * @param inputMatchingRegex The regex to match the input mapping of the packages against. Either this or the output variant needs to be specified. (optional)
     * @param outputMatchingRegex The regex to match the output mapping of the packages against. Either this or the input variant needs to be specified. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all package in the database. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no package exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackagesBySearchCriteriaCall(UUID gameVersion, UUID release, UUID mappingType, String inputMatchingRegex, String outputMatchingRegex, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameVersion", gameVersion));
        }

        if (release != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("release", release));
        }

        if (mappingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingType", mappingType));
        }

        if (inputMatchingRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inputMatchingRegex", inputMatchingRegex));
        }

        if (outputMatchingRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputMatchingRegex", outputMatchingRegex));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackagesBySearchCriteriaValidateBeforeCall(UUID gameVersion, UUID release, UUID mappingType, String inputMatchingRegex, String outputMatchingRegex, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPackagesBySearchCriteriaCall(gameVersion, release, mappingType, inputMatchingRegex, outputMatchingRegex, page, size, sort, _callback);
        return localVarCall;

    }

    /**
     * Gets all known packages that match the given parameters.
     * 
     * @param gameVersion The id of the game version to get the package for. (optional)
     * @param release The id of the release to get the package for. (optional)
     * @param mappingType The id of the mapping type to get the package for. (optional)
     * @param inputMatchingRegex The regex to match the input mapping of the packages against. Either this or the output variant needs to be specified. (optional)
     * @param outputMatchingRegex The regex to match the output mapping of the packages against. Either this or the input variant needs to be specified. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PageString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all package in the database. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no package exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public PageString getPackagesBySearchCriteria(UUID gameVersion, UUID release, UUID mappingType, String inputMatchingRegex, String outputMatchingRegex, Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<PageString> localVarResp = getPackagesBySearchCriteriaWithHttpInfo(gameVersion, release, mappingType, inputMatchingRegex, outputMatchingRegex, page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Gets all known packages that match the given parameters.
     * 
     * @param gameVersion The id of the game version to get the package for. (optional)
     * @param release The id of the release to get the package for. (optional)
     * @param mappingType The id of the mapping type to get the package for. (optional)
     * @param inputMatchingRegex The regex to match the input mapping of the packages against. Either this or the output variant needs to be specified. (optional)
     * @param outputMatchingRegex The regex to match the output mapping of the packages against. Either this or the input variant needs to be specified. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;PageString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all package in the database. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no package exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageString> getPackagesBySearchCriteriaWithHttpInfo(UUID gameVersion, UUID release, UUID mappingType, String inputMatchingRegex, String outputMatchingRegex, Integer page, Integer size, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = getPackagesBySearchCriteriaValidateBeforeCall(gameVersion, release, mappingType, inputMatchingRegex, outputMatchingRegex, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all known packages that match the given parameters. (asynchronously)
     * 
     * @param gameVersion The id of the game version to get the package for. (optional)
     * @param release The id of the release to get the package for. (optional)
     * @param mappingType The id of the mapping type to get the package for. (optional)
     * @param inputMatchingRegex The regex to match the input mapping of the packages against. Either this or the output variant needs to be specified. (optional)
     * @param outputMatchingRegex The regex to match the output mapping of the packages against. Either this or the input variant needs to be specified. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all package in the database. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no package exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackagesBySearchCriteriaAsync(UUID gameVersion, UUID release, UUID mappingType, String inputMatchingRegex, String outputMatchingRegex, Integer page, Integer size, List<String> sort, final ApiCallback<PageString> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackagesBySearchCriteriaValidateBeforeCall(gameVersion, release, mappingType, inputMatchingRegex, outputMatchingRegex, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
