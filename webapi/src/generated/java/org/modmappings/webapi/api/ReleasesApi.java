/*
 * ModMappings API
 * This is the api for ModMappings. It is currently in development and in an alpha stage.
 *
 * The version of the OpenAPI document: 0.0.0-Dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.modmappings.webapi.api;

import org.modmappings.webapi.invoker.ApiCallback;
import org.modmappings.webapi.invoker.ApiClient;
import org.modmappings.webapi.invoker.ApiException;
import org.modmappings.webapi.invoker.ApiResponse;
import org.modmappings.webapi.invoker.Configuration;
import org.modmappings.webapi.invoker.Pair;
import org.modmappings.webapi.invoker.ProgressRequestBody;
import org.modmappings.webapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.modmappings.webapi.model.PageRelease;
import org.modmappings.webapi.model.Release;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReleasesApi {
    private ApiClient localVarApiClient;

    public ReleasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReleasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createRelease
     * @param gameVersion  (required)
     * @param mappingType  (required)
     * @param release  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Creates the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReleaseCall(UUID gameVersion, UUID mappingType, Release release, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = release;

        // create path and map variables
        String localVarPath = "/releases/{mappingType}/{gameVersion}"
            .replaceAll("\\{" + "gameVersion" + "\\}", localVarApiClient.escapeString(gameVersion.toString()))
            .replaceAll("\\{" + "mappingType" + "\\}", localVarApiClient.escapeString(mappingType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ModMappings auth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReleaseValidateBeforeCall(UUID gameVersion, UUID mappingType, Release release, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'gameVersion' is set
        if (gameVersion == null) {
            throw new ApiException("Missing the required parameter 'gameVersion' when calling createRelease(Async)");
        }
        
        // verify the required parameter 'mappingType' is set
        if (mappingType == null) {
            throw new ApiException("Missing the required parameter 'mappingType' when calling createRelease(Async)");
        }
        

        okhttp3.Call localVarCall = createReleaseCall(gameVersion, mappingType, release, _callback);
        return localVarCall;

    }

    /**
     * Creates the release from the data in the request body.
     * This converts the data in the request body into a full release, and stores it in the database. The components of this release are populated from the latest available mappings in the given mapping type and game version. The name of the release can not already be in use. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASES_CREATE&#39; to execute this action successfully.
     * @param gameVersion  (required)
     * @param mappingType  (required)
     * @param release  (optional)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Creates the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public Release createRelease(UUID gameVersion, UUID mappingType, Release release) throws ApiException {
        ApiResponse<Release> localVarResp = createReleaseWithHttpInfo(gameVersion, mappingType, release);
        return localVarResp.getData();
    }

    /**
     * Creates the release from the data in the request body.
     * This converts the data in the request body into a full release, and stores it in the database. The components of this release are populated from the latest available mappings in the given mapping type and game version. The name of the release can not already be in use. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASES_CREATE&#39; to execute this action successfully.
     * @param gameVersion  (required)
     * @param mappingType  (required)
     * @param release  (optional)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Creates the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> createReleaseWithHttpInfo(UUID gameVersion, UUID mappingType, Release release) throws ApiException {
        okhttp3.Call localVarCall = createReleaseValidateBeforeCall(gameVersion, mappingType, release, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates the release from the data in the request body. (asynchronously)
     * This converts the data in the request body into a full release, and stores it in the database. The components of this release are populated from the latest available mappings in the given mapping type and game version. The name of the release can not already be in use. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASES_CREATE&#39; to execute this action successfully.
     * @param gameVersion  (required)
     * @param mappingType  (required)
     * @param release  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Creates the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReleaseAsync(UUID gameVersion, UUID mappingType, Release release, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReleaseValidateBeforeCall(gameVersion, mappingType, release, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRelease
     * @param id The id of the release to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReleaseCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/releases/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ModMappings auth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReleaseValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRelease(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReleaseCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deletes the release with the given id.
     * This looks up the release with the given id from the database and deletes it. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASES_DELETE&#39; to execute this action successfully.
     * @param id The id of the release to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRelease(UUID id) throws ApiException {
        deleteReleaseWithHttpInfo(id);
    }

    /**
     * Deletes the release with the given id.
     * This looks up the release with the given id from the database and deletes it. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASES_DELETE&#39; to execute this action successfully.
     * @param id The id of the release to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReleaseWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteReleaseValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the release with the given id. (asynchronously)
     * This looks up the release with the given id from the database and deletes it. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASES_DELETE&#39; to execute this action successfully.
     * @param id The id of the release to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deletes the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReleaseAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReleaseValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReleasesById
     * @param id The id of the release to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no release with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReleasesByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/releases/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReleasesByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReleasesById(Async)");
        }
        

        okhttp3.Call localVarCall = getReleasesByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Looks up a release using a given id.
     * 
     * @param id The id of the release to look up. (required)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no release with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public Release getReleasesById(UUID id) throws ApiException {
        ApiResponse<Release> localVarResp = getReleasesByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Looks up a release using a given id.
     * 
     * @param id The id of the release to look up. (required)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no release with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> getReleasesByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getReleasesByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Looks up a release using a given id. (asynchronously)
     * 
     * @param id The id of the release to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no release with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the release with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReleasesByIdAsync(UUID id, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReleasesByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReleasesBySearchCriteria
     * @param name The regular expression to match the name of the release against. (optional)
     * @param gameVersion The id of the game version to filter releases on. (optional)
     * @param mappingType The id of the mapping type to filter releases on. (optional)
     * @param snapshot Determines if snapshot releases are supposed to be filtered out, leave the parameter out to not filter on snapshot state of releases. (optional)
     * @param mappingId The id of the mapping to filter releases on. (optional)
     * @param user The id of the user who created the release to filter releases on. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all releases in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no release exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReleasesBySearchCriteriaCall(String name, UUID gameVersion, UUID mappingType, Boolean snapshot, UUID mappingId, UUID user, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/releases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (gameVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameVersion", gameVersion));
        }

        if (mappingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingType", mappingType));
        }

        if (snapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("snapshot", snapshot));
        }

        if (mappingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingId", mappingId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReleasesBySearchCriteriaValidateBeforeCall(String name, UUID gameVersion, UUID mappingType, Boolean snapshot, UUID mappingId, UUID user, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getReleasesBySearchCriteriaCall(name, gameVersion, mappingType, snapshot, mappingId, user, page, size, sort, _callback);
        return localVarCall;

    }

    /**
     * Gets all known releases and finds the ones that match the given parameters.
     * 
     * @param name The regular expression to match the name of the release against. (optional)
     * @param gameVersion The id of the game version to filter releases on. (optional)
     * @param mappingType The id of the mapping type to filter releases on. (optional)
     * @param snapshot Determines if snapshot releases are supposed to be filtered out, leave the parameter out to not filter on snapshot state of releases. (optional)
     * @param mappingId The id of the mapping to filter releases on. (optional)
     * @param user The id of the user who created the release to filter releases on. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PageRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all releases in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no release exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public PageRelease getReleasesBySearchCriteria(String name, UUID gameVersion, UUID mappingType, Boolean snapshot, UUID mappingId, UUID user, Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<PageRelease> localVarResp = getReleasesBySearchCriteriaWithHttpInfo(name, gameVersion, mappingType, snapshot, mappingId, user, page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Gets all known releases and finds the ones that match the given parameters.
     * 
     * @param name The regular expression to match the name of the release against. (optional)
     * @param gameVersion The id of the game version to filter releases on. (optional)
     * @param mappingType The id of the mapping type to filter releases on. (optional)
     * @param snapshot Determines if snapshot releases are supposed to be filtered out, leave the parameter out to not filter on snapshot state of releases. (optional)
     * @param mappingId The id of the mapping to filter releases on. (optional)
     * @param user The id of the user who created the release to filter releases on. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;PageRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all releases in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no release exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageRelease> getReleasesBySearchCriteriaWithHttpInfo(String name, UUID gameVersion, UUID mappingType, Boolean snapshot, UUID mappingId, UUID user, Integer page, Integer size, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = getReleasesBySearchCriteriaValidateBeforeCall(name, gameVersion, mappingType, snapshot, mappingId, user, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all known releases and finds the ones that match the given parameters. (asynchronously)
     * 
     * @param name The regular expression to match the name of the release against. (optional)
     * @param gameVersion The id of the game version to filter releases on. (optional)
     * @param mappingType The id of the mapping type to filter releases on. (optional)
     * @param snapshot Determines if snapshot releases are supposed to be filtered out, leave the parameter out to not filter on snapshot state of releases. (optional)
     * @param mappingId The id of the mapping to filter releases on. (optional)
     * @param user The id of the user who created the release to filter releases on. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns all releases in the database, that match the search criteria. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Indicates that no release exists in the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReleasesBySearchCriteriaAsync(String name, UUID gameVersion, UUID mappingType, Boolean snapshot, UUID mappingId, UUID user, Integer page, Integer size, List<String> sort, final ApiCallback<PageRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReleasesBySearchCriteriaValidateBeforeCall(name, gameVersion, mappingType, snapshot, mappingId, user, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRelease
     * @param id The id of the release to update. (required)
     * @param release  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No release with the given id could be found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReleaseCall(UUID id, Release release, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = release;

        // create path and map variables
        String localVarPath = "/releases/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ModMappings auth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReleaseValidateBeforeCall(UUID id, Release release, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRelease(Async)");
        }
        

        okhttp3.Call localVarCall = updateReleaseCall(id, release, _callback);
        return localVarCall;

    }

    /**
     * Updates, but does not create, the release from the data in the request body.
     * This converts the data in the request body into a full release, then updates the release with the given id, and stores the updated release in the database. The new name of the release can not already be in use by a different release. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASE_UPDATE&#39; to execute this action successfully.
     * @param id The id of the release to update. (required)
     * @param release  (optional)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No release with the given id could be found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public Release updateRelease(UUID id, Release release) throws ApiException {
        ApiResponse<Release> localVarResp = updateReleaseWithHttpInfo(id, release);
        return localVarResp.getData();
    }

    /**
     * Updates, but does not create, the release from the data in the request body.
     * This converts the data in the request body into a full release, then updates the release with the given id, and stores the updated release in the database. The new name of the release can not already be in use by a different release. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASE_UPDATE&#39; to execute this action successfully.
     * @param id The id of the release to update. (required)
     * @param release  (optional)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No release with the given id could be found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> updateReleaseWithHttpInfo(UUID id, Release release) throws ApiException {
        okhttp3.Call localVarCall = updateReleaseValidateBeforeCall(id, release, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates, but does not create, the release from the data in the request body. (asynchronously)
     * This converts the data in the request body into a full release, then updates the release with the given id, and stores the updated release in the database. The new name of the release can not already be in use by a different release. A user needs to be authorized to perform this request. A user needs to have the role &#39;RELEASE_UPDATE&#39; to execute this action successfully.
     * @param id The id of the release to update. (required)
     * @param release  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the release with the given id. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The name for the given release is already in use. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No release with the given id could be found. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReleaseAsync(UUID id, Release release, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReleaseValidateBeforeCall(id, release, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
