/*
 * ModMappings API
 * This is the api for ModMappings. It is currently in development and in an alpha stage.
 *
 * The version of the OpenAPI document: 0.0.0-Dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.modmappings.webapi.api;

import org.modmappings.webapi.invoker.ApiCallback;
import org.modmappings.webapi.invoker.ApiClient;
import org.modmappings.webapi.invoker.ApiException;
import org.modmappings.webapi.invoker.ApiResponse;
import org.modmappings.webapi.invoker.Configuration;
import org.modmappings.webapi.invoker.Pair;
import org.modmappings.webapi.invoker.ProgressRequestBody;
import org.modmappings.webapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.modmappings.webapi.model.MappableType;
import org.modmappings.webapi.model.PageVersionedMappable;
import java.util.UUID;
import org.modmappings.webapi.model.VersionedMappable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VersionedMappablesApi {
    private ApiClient localVarApiClient;

    public VersionedMappablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VersionedMappablesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getVersionedMappableById
     * @param id The id of the versioned mappable to look up. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappable with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the versioned mappable with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionedMappableByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/versioned_mappables/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionedMappableByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVersionedMappableById(Async)");
        }
        

        okhttp3.Call localVarCall = getVersionedMappableByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Looks up a versioned mappable using a given id.
     * 
     * @param id The id of the versioned mappable to look up. (required)
     * @return VersionedMappable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappable with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the versioned mappable with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public VersionedMappable getVersionedMappableById(UUID id) throws ApiException {
        ApiResponse<VersionedMappable> localVarResp = getVersionedMappableByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Looks up a versioned mappable using a given id.
     * 
     * @param id The id of the versioned mappable to look up. (required)
     * @return ApiResponse&lt;VersionedMappable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappable with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the versioned mappable with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionedMappable> getVersionedMappableByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getVersionedMappableByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VersionedMappable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Looks up a versioned mappable using a given id. (asynchronously)
     * 
     * @param id The id of the versioned mappable to look up. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappable with the given id could be found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns the versioned mappable with the given id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionedMappableByIdAsync(UUID id, final ApiCallback<VersionedMappable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionedMappableByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VersionedMappable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionedMappablesBySearchCriteria
     * @param gameVersionId The id of the game version. Null to ignore. (optional)
     * @param mappableType The type of the mappable to look up. Null to ignore. (optional)
     * @param classId The id of the class to find versioned mappables in. Null to ignore. (optional)
     * @param methodId The id of the method to find versioned mappables in. Null to ignore. (optional)
     * @param mappingId The id of the mapping to find the versioned mappables for. Null to ignore. If parameter is passed, either a single result is returned or none. Since each mapping can only target a single versioned mappable. (optional)
     * @param mappingTypeId The id of the mapping type to find the versioned mappables for. Null to ignore. Use full in combination with a input and output regex. (optional)
     * @param mappingInputRegex A regex that is mapped against the input of the mapping. Null to ignore (optional)
     * @param mappingOutputRegex A regex that is mapped against the output of the mapping. Null to ignore (optional)
     * @param superTypeTargetId The id of the class to find the super types for. Null to ignore. (optional)
     * @param subTypeTargetId The id of the class to find the sub types for. Null to ignore. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappables exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all the versioned mappables in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionedMappablesBySearchCriteriaCall(UUID gameVersionId, MappableType mappableType, UUID classId, UUID methodId, UUID mappingId, UUID mappingTypeId, String mappingInputRegex, String mappingOutputRegex, UUID superTypeTargetId, UUID subTypeTargetId, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/versioned_mappables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameVersionId", gameVersionId));
        }

        if (mappableType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappableType", mappableType));
        }

        if (classId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classId", classId));
        }

        if (methodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("methodId", methodId));
        }

        if (mappingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingId", mappingId));
        }

        if (mappingTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingTypeId", mappingTypeId));
        }

        if (mappingInputRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingInputRegex", mappingInputRegex));
        }

        if (mappingOutputRegex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappingOutputRegex", mappingOutputRegex));
        }

        if (superTypeTargetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("superTypeTargetId", superTypeTargetId));
        }

        if (subTypeTargetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subTypeTargetId", subTypeTargetId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionedMappablesBySearchCriteriaValidateBeforeCall(UUID gameVersionId, MappableType mappableType, UUID classId, UUID methodId, UUID mappingId, UUID mappingTypeId, String mappingInputRegex, String mappingOutputRegex, UUID superTypeTargetId, UUID subTypeTargetId, Integer page, Integer size, List<String> sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getVersionedMappablesBySearchCriteriaCall(gameVersionId, mappableType, classId, methodId, mappingId, mappingTypeId, mappingInputRegex, mappingOutputRegex, superTypeTargetId, subTypeTargetId, page, size, sort, _callback);
        return localVarCall;

    }

    /**
     * Gets all known versioned mappables that match the given parameters.
     * 
     * @param gameVersionId The id of the game version. Null to ignore. (optional)
     * @param mappableType The type of the mappable to look up. Null to ignore. (optional)
     * @param classId The id of the class to find versioned mappables in. Null to ignore. (optional)
     * @param methodId The id of the method to find versioned mappables in. Null to ignore. (optional)
     * @param mappingId The id of the mapping to find the versioned mappables for. Null to ignore. If parameter is passed, either a single result is returned or none. Since each mapping can only target a single versioned mappable. (optional)
     * @param mappingTypeId The id of the mapping type to find the versioned mappables for. Null to ignore. Use full in combination with a input and output regex. (optional)
     * @param mappingInputRegex A regex that is mapped against the input of the mapping. Null to ignore (optional)
     * @param mappingOutputRegex A regex that is mapped against the output of the mapping. Null to ignore (optional)
     * @param superTypeTargetId The id of the class to find the super types for. Null to ignore. (optional)
     * @param subTypeTargetId The id of the class to find the sub types for. Null to ignore. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PageVersionedMappable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappables exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all the versioned mappables in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public PageVersionedMappable getVersionedMappablesBySearchCriteria(UUID gameVersionId, MappableType mappableType, UUID classId, UUID methodId, UUID mappingId, UUID mappingTypeId, String mappingInputRegex, String mappingOutputRegex, UUID superTypeTargetId, UUID subTypeTargetId, Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<PageVersionedMappable> localVarResp = getVersionedMappablesBySearchCriteriaWithHttpInfo(gameVersionId, mappableType, classId, methodId, mappingId, mappingTypeId, mappingInputRegex, mappingOutputRegex, superTypeTargetId, subTypeTargetId, page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Gets all known versioned mappables that match the given parameters.
     * 
     * @param gameVersionId The id of the game version. Null to ignore. (optional)
     * @param mappableType The type of the mappable to look up. Null to ignore. (optional)
     * @param classId The id of the class to find versioned mappables in. Null to ignore. (optional)
     * @param methodId The id of the method to find versioned mappables in. Null to ignore. (optional)
     * @param mappingId The id of the mapping to find the versioned mappables for. Null to ignore. If parameter is passed, either a single result is returned or none. Since each mapping can only target a single versioned mappable. (optional)
     * @param mappingTypeId The id of the mapping type to find the versioned mappables for. Null to ignore. Use full in combination with a input and output regex. (optional)
     * @param mappingInputRegex A regex that is mapped against the input of the mapping. Null to ignore (optional)
     * @param mappingOutputRegex A regex that is mapped against the output of the mapping. Null to ignore (optional)
     * @param superTypeTargetId The id of the class to find the super types for. Null to ignore. (optional)
     * @param subTypeTargetId The id of the class to find the sub types for. Null to ignore. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;PageVersionedMappable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappables exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all the versioned mappables in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageVersionedMappable> getVersionedMappablesBySearchCriteriaWithHttpInfo(UUID gameVersionId, MappableType mappableType, UUID classId, UUID methodId, UUID mappingId, UUID mappingTypeId, String mappingInputRegex, String mappingOutputRegex, UUID superTypeTargetId, UUID subTypeTargetId, Integer page, Integer size, List<String> sort) throws ApiException {
        okhttp3.Call localVarCall = getVersionedMappablesBySearchCriteriaValidateBeforeCall(gameVersionId, mappableType, classId, methodId, mappingId, mappingTypeId, mappingInputRegex, mappingOutputRegex, superTypeTargetId, subTypeTargetId, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageVersionedMappable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all known versioned mappables that match the given parameters. (asynchronously)
     * 
     * @param gameVersionId The id of the game version. Null to ignore. (optional)
     * @param mappableType The type of the mappable to look up. Null to ignore. (optional)
     * @param classId The id of the class to find versioned mappables in. Null to ignore. (optional)
     * @param methodId The id of the method to find versioned mappables in. Null to ignore. (optional)
     * @param mappingId The id of the mapping to find the versioned mappables for. Null to ignore. If parameter is passed, either a single result is returned or none. Since each mapping can only target a single versioned mappable. (optional)
     * @param mappingTypeId The id of the mapping type to find the versioned mappables for. Null to ignore. Use full in combination with a input and output regex. (optional)
     * @param mappingInputRegex A regex that is mapped against the input of the mapping. Null to ignore (optional)
     * @param mappingOutputRegex A regex that is mapped against the output of the mapping. Null to ignore (optional)
     * @param superTypeTargetId The id of the class to find the super types for. Null to ignore. (optional)
     * @param subTypeTargetId The id of the class to find the sub types for. Null to ignore. (optional)
     * @param page Zero-based page index (0..N) (optional)
     * @param size The size of the page to be returned (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Indicates that no versioned mappables exists in the database. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns all the versioned mappables in the database, that match the search criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionedMappablesBySearchCriteriaAsync(UUID gameVersionId, MappableType mappableType, UUID classId, UUID methodId, UUID mappingId, UUID mappingTypeId, String mappingInputRegex, String mappingOutputRegex, UUID superTypeTargetId, UUID subTypeTargetId, Integer page, Integer size, List<String> sort, final ApiCallback<PageVersionedMappable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionedMappablesBySearchCriteriaValidateBeforeCall(gameVersionId, mappableType, classId, methodId, mappingId, mappingTypeId, mappingInputRegex, mappingOutputRegex, superTypeTargetId, subTypeTargetId, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageVersionedMappable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVersionedMappable
     * @param id The id of the versioned mappable to update. (required)
     * @param versionedMappable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the versioned mappable with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No versioned mappable with the given id could be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVersionedMappableCall(UUID id, VersionedMappable versionedMappable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = versionedMappable;

        // create path and map variables
        String localVarPath = "/versioned_mappables/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ModMappings auth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVersionedMappableValidateBeforeCall(UUID id, VersionedMappable versionedMappable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateVersionedMappable(Async)");
        }
        

        okhttp3.Call localVarCall = updateVersionedMappableCall(id, versionedMappable, _callback);
        return localVarCall;

    }

    /**
     * Updates, but does not create, the versioned mappable from the data in the request body.
     * This converts the data in the request body into a full versioned mappable, then updates the versioned mappable with the given id, and stores the updated versioned mappable in the database. A user needs to be authorized to perform this request. A user needs to have the role &#39;VERSIONED_MAPPABLES_UPDATE&#39; to execute this action successfully.
     * @param id The id of the versioned mappable to update. (required)
     * @param versionedMappable  (optional)
     * @return VersionedMappable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the versioned mappable with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No versioned mappable with the given id could be found. </td><td>  -  </td></tr>
     </table>
     */
    public VersionedMappable updateVersionedMappable(UUID id, VersionedMappable versionedMappable) throws ApiException {
        ApiResponse<VersionedMappable> localVarResp = updateVersionedMappableWithHttpInfo(id, versionedMappable);
        return localVarResp.getData();
    }

    /**
     * Updates, but does not create, the versioned mappable from the data in the request body.
     * This converts the data in the request body into a full versioned mappable, then updates the versioned mappable with the given id, and stores the updated versioned mappable in the database. A user needs to be authorized to perform this request. A user needs to have the role &#39;VERSIONED_MAPPABLES_UPDATE&#39; to execute this action successfully.
     * @param id The id of the versioned mappable to update. (required)
     * @param versionedMappable  (optional)
     * @return ApiResponse&lt;VersionedMappable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the versioned mappable with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No versioned mappable with the given id could be found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionedMappable> updateVersionedMappableWithHttpInfo(UUID id, VersionedMappable versionedMappable) throws ApiException {
        okhttp3.Call localVarCall = updateVersionedMappableValidateBeforeCall(id, versionedMappable, null);
        Type localVarReturnType = new TypeToken<VersionedMappable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates, but does not create, the versioned mappable from the data in the request body. (asynchronously)
     * This converts the data in the request body into a full versioned mappable, then updates the versioned mappable with the given id, and stores the updated versioned mappable in the database. A user needs to be authorized to perform this request. A user needs to have the role &#39;VERSIONED_MAPPABLES_UPDATE&#39; to execute this action successfully.
     * @param id The id of the versioned mappable to update. (required)
     * @param versionedMappable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates the versioned mappable with the given id. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not authorized to perform this action. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No versioned mappable with the given id could be found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVersionedMappableAsync(UUID id, VersionedMappable versionedMappable, final ApiCallback<VersionedMappable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVersionedMappableValidateBeforeCall(id, versionedMappable, _callback);
        Type localVarReturnType = new TypeToken<VersionedMappable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
